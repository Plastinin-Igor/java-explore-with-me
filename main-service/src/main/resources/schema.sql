-- public.categories definition

-- Drop table

-- DROP TABLE categories;

create TABLE IF NOT EXISTS categories (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, -- Идентификатор категории
	name varchar(50) NOT NULL, -- Название категории
	CONSTRAINT categories_pk PRIMARY KEY (id)
);
comment on table categories is 'Категории';

-- Column comments

comment on column categories.id is 'Идентификатор категории';
comment on column categories.name is 'Название категории';


-- compilations definition

-- Drop table

-- DROP TABLE compilations;

create TABLE IF NOT EXISTS compilations (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, -- Идентификатор подборки
	pinned bool DEFAULT false NOT NULL, -- Закреплена ли подборка на главной странице сайта
	title varchar(50) NOT NULL, -- Заголовок подборки
	CONSTRAINT compilations_pk PRIMARY KEY (id)
);
comment on table compilations is 'Подборка событий';

-- Column comments

comment on column compilations.id is 'Идентификатор подборки';
comment on column compilations.pinned is 'Закреплена ли подборка на главной странице сайта';
comment on column compilations.title is 'Заголовок подборки';


-- locations definition

-- Drop table

-- DROP TABLE locations;

create TABLE IF NOT EXISTS locations (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	lat float NOT NULL, -- Широта
	lon float NOT NULL, -- Долгота
	descriptin varchar(150) NULL, -- Описание локации
	CONSTRAINT locations_pk PRIMARY KEY (id)
);

-- Column comments

comment on column locations.lat is 'Широта';
comment on column locations.lon is 'Долгота';
comment on column locations.descriptin is 'Описание локации';


-- users definition

-- Drop table

-- DROP TABLE users;

create TABLE IF NOT EXISTS users (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, -- Идентификатор
	email varchar(254) NOT NULL, -- Почтовый адрес
	name varchar(250) NOT NULL, -- Имя
	CONSTRAINT users_pk PRIMARY KEY (id)
);
comment on table users is 'Пользователи';

-- Column comments

comment on column users.id is 'Идентификатор';
comment on column users.email is 'Почтовый адрес';
comment on column users.name is 'Имя';


-- events definition

-- Drop table

-- DROP TABLE events;

create TABLE IF NOT EXISTS events (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, -- Идентификатор события
	annotation varchar(2000) NOT NULL, -- Краткое описание события
	category BIGINT NOT NULL, -- id категории к которой относится событие
	description varchar(7000) NOT NULL, -- Полное описание события
	event_date timestamp NOT NULL, -- Дата и время на которые намечено событие. Дата и время указываются в формате "yyyy-MM-dd HH:mm:ss"
	location BIGINT NOT NULL, -- Широта и долгота места проведения события
	paid bool DEFAULT false NULL, -- Нужно ли оплачивать участие в событии
	participant_limit BIGINT DEFAULT 0 NULL, -- Ограничение на количество участников. Значение 0 - означает отсутствие ограничения
	confirmed_requests BIGINT DEFAULT 0 NULL, -- Количество одобренных заявок на участие в данном событии
	request_moderation bool DEFAULT true NULL, -- Нужна ли пре-модерация заявок на участие. Если true, то все заявки будут ожидать подтверждения инициатором события. Если false - то будут подтверждаться автоматически
	title varchar(120) NOT NULL, -- Заголовок события
	created_on timestamp NOT NULL, -- Дата и время создания записи события
	initiator BIGINT NOT NULL, -- Пользователь
	published_on timestamp NULL, -- Дата и время публикации события (в формате "yyyy-MM-dd HH:mm:ss")
	state varchar(15) NULL, -- Список состояний жизненного цикла события PENDING, PUBLISHED, CANCELED
	"views" BIGINT DEFAULT 0 NULL, -- Количество просмотрев события
	CONSTRAINT events_pk PRIMARY KEY (id),
	CONSTRAINT events_categories_fk FOREIGN KEY (category) REFERENCES categories(id),
	CONSTRAINT events_locations_fk FOREIGN KEY (location) REFERENCES locations(id),
	CONSTRAINT events_users_fk FOREIGN KEY (initiator) REFERENCES users(id)
);
comment on table events is 'Событие';

-- Column comments

comment on column events.id is 'Идентификатор события';
comment on column events.annotation is 'Краткое описание события';
comment on column events.category is 'id категории к которой относится событие';
comment on column events.description is 'Полное описание события';
comment on column events.event_date is 'Дата и время на которые намечено событие. Дата и время указываются в формате "yyyy-MM-dd HH:mm:ss"';
comment on column events.location is 'Широта и долгота места проведения события';
comment on column events.paid is 'Нужно ли оплачивать участие в событии';
comment on column events.participant_limit is 'Ограничение на количество участников. Значение 0 - означает отсутствие ограничения';
comment on column events.confirmed_requests is 'Количество одобренных заявок на участие в данном событии';
comment on column events.request_moderation is 'Нужна ли пре-модерация заявок на участие. Если true, то все заявки будут ожидать подтверждения инициатором события. Если false - то будут подтверждаться автоматически';
comment on column events.title is 'Заголовок события';
comment on column events.created_on is 'Дата и время создания записи события';
comment on column events.initiator is 'Пользователь';
comment on column events.published_on is 'Дата и время публикации события (в формате "yyyy-MM-dd HH:mm:ss")';
comment on column events.state is 'Список состояний жизненного цикла события PENDING, PUBLISHED, CANCELED';
comment on column events."views" is 'Количество просмотрев события';


-- participation_request definition

-- Drop table

-- DROP TABLE participation_request;

create TABLE IF NOT EXISTS participation_request (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, -- Идентификатор заявки
	created timestamp NOT NULL, -- Дата и время создания заявки
	event BIGINT NOT NULL, -- Идентификатор события
	requester BIGINT NOT NULL, -- Идентификатор пользователя, отправившего заявку
	status varchar(15) NOT NULL, -- Статус заявки
	CONSTRAINT requests_pk PRIMARY KEY (id),
	CONSTRAINT requests_events_fk FOREIGN KEY (event) REFERENCES events(id),
	CONSTRAINT requests_users_fk FOREIGN KEY (requester) REFERENCES users(id)
);

-- Column comments

comment on column participation_request.id is 'Идентификатор заявки';
comment on column participation_request.created is 'Дата и время создания заявки';
comment on column participation_request.event is 'Идентификатор события';
comment on column participation_request.requester is 'Идентификатор пользователя, отправившего заявку';
comment on column participation_request.status is 'Статус заявки';


-- compilation_events definition

-- Drop table

-- DROP TABLE compilation_events;

create TABLE IF NOT EXISTS compilation_events (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, -- Идентификатор списка
	compilation_id BIGINT NOT NULL, -- Подборка
	event_id BIGINT NOT NULL, -- Событие
	CONSTRAINT compilation_events_pk PRIMARY KEY (id),
	CONSTRAINT compilation_events_compilations_fk FOREIGN KEY (compilation_id) REFERENCES compilations(id),
	CONSTRAINT compilation_events_events_fk FOREIGN KEY (event_id) REFERENCES events(id)
);
comment on table compilation_events is 'Список идентификаторов событий входящих в подборку';

-- Column comments

comment on column compilation_events.id is 'Идентификатор списка';
comment on column compilation_events.compilation_id is 'Подборка';
comment on column compilation_events.event_id is 'Событие';


-- public.comments definition

-- Drop table

-- DROP TABLE comments;

create TABLE IF NOT EXISTS comments (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, -- Идентификатор комментария
	event BIGINT NOT NULL, -- Событие
	author BIGINT NOT NULL, -- Автор комментария
	created timestamp NOT NULL, -- Дата создания комментария
	text varchar(7000) NOT NULL, -- Текст
	state varchar(15) NOT NULL, -- Состояние комментария
	likes BIGINT DEFAULT 0 NULL, -- Количество лайков
	dislikes BIGINT DEFAULT 0 NULL, -- Количество дизлайков
	CONSTRAINT comments_pk PRIMARY KEY (id),
	CONSTRAINT comments_events_fk FOREIGN KEY (event) REFERENCES events(id),
	CONSTRAINT comments_users_fk FOREIGN KEY (author) REFERENCES users(id)
);

-- Column comments

comment on column comments.id is 'Идентификатор комментария';
comment on column comments.event is 'Событие';
comment on column comments.author is 'Автор комментария';
comment on column comments.created is 'Дата создания комментария';
comment on column comments.text is 'Текст';
comment on column comments.state is 'Состояние комментария';
comment on column comments.likes is 'Количество лайков';
comment on column comments.dislikes is 'Количество дизлайков';

-- public.likes definition

-- Drop table

-- DROP TABLE likes;

CREATE TABLE IF NOT EXISTS likes (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, -- Идентификатор записи
	comment_id BIGINT NOT NULL, -- Комментарий
	user_id BIGINT NOT NULL, -- Пользователь
	likes bool, -- Лайк
	dislike bool, -- Дизлайк
	CONSTRAINT likes_pk PRIMARY KEY (id),
	CONSTRAINT likes_comments_fk FOREIGN KEY (comment_id) REFERENCES comments(id),
    CONSTRAINT likes_users_fk FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Column comments

COMMENT ON COLUMN likes.id IS 'Идентификатор записи';
COMMENT ON COLUMN likes.comment_id IS 'Комментарий';
COMMENT ON COLUMN likes.likes IS 'Лайк';
COMMENT ON COLUMN likes.dislike IS 'Дизлайк';
COMMENT ON COLUMN likes.user_id IS 'Пользователь';